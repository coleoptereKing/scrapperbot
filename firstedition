

import os
import time
import requests





def send_telegram_message(text: str):
    if not TELEGRAM_BOT_TOKEN or not TELEGRAM_CHAT_ID:
        print("Telegram not configured. Message would be:\n", text)
        return
    url = f'https://api.telegram.org/bot{TELEGRAM_BOT_TOKEN}/sendMessage'
    payload = {
        'chat_id': TELEGRAM_CHAT_ID,
        'text': text,
        'parse_mode': 'HTML',
        'disable_web_page_preview': True
    }
    try:
        requests.post(url, data=payload, timeout=10)
    except Exception as e:
        print('Telegram send failed:', e)


def fetch_verified_tokens(start_block=None, end_block=None):
    params = {
        'module': 'token',
        'action': 'tokenlist',
        'apikey': BASESCAN_API_KEY
    }
    if start_block and end_block:
        params.update({'startblock': start_block, 'endblock': end_block})
    try:
        r = requests.get(BASESCAN_API_URL, params=params, timeout=15)
        data = r.json()
        if data.get('status') == '1':
            return data.get('result', [])
        return []
    except Exception as e:
        print('Error fetching verified tokens:', e)
        return []


# ---------- Main ----------

def main():
    print('Starting Verified Token Watcher on Base...')
    seen_addresses = set()

    while True:
        tokens = fetch_verified_tokens()
        new_tokens = [t for t in tokens if t['contractAddress'].lower() not in seen_addresses]

        for token in new_tokens:
            seen_addresses.add(token['contractAddress'].lower())
            name = token.get('tokenName', '—')
            symbol = token.get('tokenSymbol', '—')
            supply = token.get('totalSupply', '—')
            address = token.get('contractAddress')

            msg = (
                f"✅ New verified token on Base\n"
                f"<b>{name}</b> ({symbol})\n"
                f"Address: <a href=\"{EXPLORER_BASE_URL}{address}\">{address}</a>\n"
                f"Total Supply: {supply}\n"
            )
            print('Verified token found:', name, symbol)
            send_telegram_message(msg)

        time.sleep(POLL_INTERVAL)


if __name__ == '__main__':
    main()
